@typeparam TItem

<div class="mb-2">
    <div class="col-lg-4">
        @if (EnableSearch)
        {
            <input type="text" class="form-control" placeholder="Search..."
                   @bind="SearchText" @bind:event="oninput" width="20%" />
        }
    </div>
   
</div>

<div class="table-responsive">
    <table class="table table-hover">
        <thead>
            <tr>
                @if (ShowRowNumber)
                {
                    <th>#</th>
                }

                @foreach (var column in Columns)
                {
                    <th @onclick="() => SortBy(column.PropertyName)">
                        @column.Title
                        @if (SortColumn == column.PropertyName)
                        {
                            <span>@(SortAscending ? "▲" : "▼")</span>
                        }
                    </th>
                }

                @if (EnableActions)
                {
                    <th>Actions</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in PagedItems.Select((value, index) => new { value, index }))
            {
                <tr>
                    @if (ShowRowNumber)
                    {
                        <td>@((CurrentPage - 1) * PageSize + item.index + 1)</td>
                    }

                    @foreach (var column in Columns)
                    {
                        <td>@column.CellTemplate(item.value)</td>
                    }

                    @if (EnableActions)
                    {
                        <td>
                            @if (OnEdit.HasDelegate)
                            {
                                <button class="btn btn-sm btn-warning me-2" @onclick="() => OnEdit.InvokeAsync(item.value)">Edit</button>
                            }
                            @if (OnDelete.HasDelegate)
                            {
                                <button class="btn btn-sm btn-danger" @onclick="() => OnDelete.InvokeAsync(item.value)">Delete</button>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

@if (TotalPages > 1)
{
    <nav>
        <ul class="pagination">
            <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="()=>ChangePage(CurrentPage-1)">Previous</button>
            </li>
            @for (int i = 1; i <= TotalPages; i++)
            {
                int page = 1;
                page = i;
                <li class="page-item @(CurrentPage == i ? "active" : "")">
                    <button class="page-link" @onclick="()=>ChangePage(page)">@i</button>
                </li>
            }
            <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                <button class="page-link" @onclick="()=>ChangePage(CurrentPage+1)">Next</button>
            </li>
        </ul>
    </nav>
}

@code {
    [Parameter] public IEnumerable<TItem> Items { get; set; } = new List<TItem>();
    [Parameter] public List<ColumnDefinition<TItem>> Columns { get; set; } = new();
    [Parameter] public int PageSize { get; set; } = 5;
    [Parameter] public bool ShowRowNumber { get; set; } = true;
    [Parameter] public bool EnableSearch { get; set; } = true;
    [Parameter] public bool EnableActions { get; set; } = true;
    [Parameter] public EventCallback<TItem> OnEdit { get; set; }
    [Parameter] public EventCallback<TItem> OnDelete { get; set; }

    private int CurrentPage { get; set; } = 1;
    private string SortColumn { get; set; } = string.Empty;
    private bool SortAscending { get; set; } = true;
    private string SearchText { get; set; } = string.Empty;

    private IEnumerable<TItem> FilteredItems =>
        string.IsNullOrWhiteSpace(SearchText)
            ? Items
            : Items.Where(x => Columns.Any(c =>
                (GetPropertyValue(x, c.PropertyName)?.ToString() ?? "")
                    .Contains(SearchText, StringComparison.OrdinalIgnoreCase)
            ));

    private IEnumerable<TItem> SortedItems =>
        string.IsNullOrEmpty(SortColumn)
            ? FilteredItems
            : (SortAscending
                ? FilteredItems.OrderBy(x => GetPropertyValue(x, SortColumn))
                : FilteredItems.OrderByDescending(x => GetPropertyValue(x, SortColumn)));

    private IEnumerable<TItem> PagedItems =>
        SortedItems
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize);

    private int TotalPages => (int)Math.Ceiling(SortedItems.Count() / (double)PageSize);

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= TotalPages)
            CurrentPage = page;
    }

    private void SortBy(string column)
    {
        if (SortColumn == column)
            SortAscending = !SortAscending;
        else
        {
            SortColumn = column;
            SortAscending = true;
        }
        CurrentPage = 1;
    }

    private object? GetPropertyValue(TItem item, string propertyName)
    {
        return item?.GetType().GetProperty(propertyName)?.GetValue(item);
    }
}
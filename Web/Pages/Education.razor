@page "/education"
@inject IEmployeeService emp
@inject IJSRuntime JS
@inject IFileUploadService fileUploadService
@using System.IO;
@using System.Net.Http.Headers

@using System.ComponentModel.DataAnnotations
@using ApplicationLayer.DTOs
@using ApplicationLayer.RequestModel
@using ApplicationLayer.Services

<h4>Education and Qualification</h4>


<EditForm Model="educationRequest">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-3">
        <!-- Employee Dropdown -->
        <div class="col-md-3">
            <label>Employee No *</label>
            <InputSelect class="form-control" @bind-Value="educationRequest.EmployeeID"
                         @onchange="OnEmployeeChanged">
                <option value="">-- Select Employee --</option>
                @foreach (var emp in Employees)
                {
                    <option value="@emp.EmployeeID">@emp.Name</option>
                }
            </InputSelect>
        </div>
    </div>

</EditForm>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Education *</th>
            <th>Subject *</th>
            <th>Institution *</th>
            <th>Start Year *</th>
            <th>End Year *</th>
            <th>Remark</th>
            <th style="width:260px;" class="text-center">Attachment</th>
            <th style="width:160px;" class="text-center">Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in educationRequest.EducationRequestItems)
        {
            <tr>
                <td>@item.Education</td>
                <td>@item.Subject</td>
                <td>@item.Institution</td>
                <td>@item.StartYear</td>
                <td>@item.EndYear</td>
                <td>@item.Remark</td>
                <td>
                    @if (!string.IsNullOrEmpty(item.Attachment))
                    {
                        <a @onclick="() => DownLoad(item.Attachment)" target="_blank">Download</a>
                        
                    }
                </td>
                <td>
                    <button class="btn btn-sm btn-primary" @onclick="() => EditRow(item)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteRow(item)">Delete</button>
                </td>
            </tr>
        }

        <tr>
            <td>
                <input type="text" class="form-control" @bind="educationItemRequest.Education" />
            </td>
            <td>
                <input type="text" class="form-control" @bind="educationItemRequest.Subject" />
            </td>
            <td>
                <input type="text" class="form-control" @bind="educationItemRequest.Institution" />
            </td>
            <td>
                <input type="number" class="form-control" @bind="educationItemRequest.StartYear" />
            </td>
            <td>
                <input type="number" class="form-control" @bind="educationItemRequest.EndYear" />
            </td>
            <td>
                <input type="text" class="form-control" @bind="educationItemRequest.Remark" />
            </td>
            <td>
                <InputFile id="fileInput" OnChange="OnInputFileChange" class="form-control" />
                @if (!string.IsNullOrEmpty(educationItemRequest.Attachment))
                {
                    <span>@educationItemRequest.Attachment</span>
                }
            </td>
            <td>
                <button class="btn btn-success btn-sm" @onclick="AddEducation">Update</button>
                <button class="btn btn-secondary btn-sm" @onclick="ClearNewEducation">Cancel</button>
            </td>
        </tr>
    </tbody>
</table>

<div class="mt-3">
    <button class="btn btn-primary">Save & View List</button>
    <button class="btn btn-secondary">Save & Add Another</button>
    <button class="btn btn-danger">Cancel</button>
</div>

@code {

    private string fileName = string.Empty;
    private EducationRequest educationRequest = new();
    private EducationItemRequest educationItemRequest = new();
    private List<EmployeeDto> Employees = new();

    protected override async Task OnInitializedAsync()
    {
        // Fetch employee list from API
        Employees = await emp.GetAllAsync();
    }

    private void OnEmployeeChanged(ChangeEventArgs e)
    {
        var selectedId = Convert.ToString(e.Value);
        var emp = Employees.FirstOrDefault(x => x.EmployeeID == selectedId);

        if (emp != null)
        {
            educationRequest.EmployeeID = emp.EmployeeID;
            educationRequest.EmployeeName = emp.Name;

        }
    }


    private void AddEducation()
    {
        if (!string.IsNullOrWhiteSpace(educationItemRequest.Education))
        {
            educationItemRequest.Attachment = fileName;
            educationRequest.EducationRequestItems.Add(educationItemRequest);
            educationItemRequest = new EducationItemRequest();
        }
    }

    private void EditRow(EducationItemRequest item)
    {
        educationItemRequest = item;
        educationRequest.EducationRequestItems.Remove(item);
    }

    private void DeleteRow(EducationItemRequest item)
    {
        educationRequest.EducationRequestItems.Remove(item);
    }

    private void ClearNewEducation()
    {
        educationRequest = new EducationRequest();
    }

    private long fileSize;


    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();

        var file = files[0];
        fileName = file.Name;

        var response = await fileUploadService.Create(file, "Employee", fileName);
        //if (response.IsSuccessStatusCode)
        //SuccessMessage = "Upload Successfully!";
        //else
        //ErrorMessage = "Upload failed. Please try again.";

    }

    private async Task DownLoad(string url)
    {
        var response = await fileUploadService.Download(url);

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsByteArrayAsync();
            var fileNameHeader = url;
            using var streamRef = new Microsoft.JSInterop.DotNetStreamReference(new MemoryStream(content));
            await JS.InvokeVoidAsync("downloadFileFromStream", fileNameHeader, streamRef);
        }
    }

}
